apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android' //realms

/*********************Kotlin plugin*****************************************/
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt' //kapt improvement for kotlin 1.0.6
apply plugin: "kotlin-allopen"
allOpen {
    annotation("com.cnr.phr_android.common.AllOpen")
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "org.mhee.playground"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    afterEvaluate {
        android.sourceSets.all { sourceSet ->
            if (!sourceSet.name.startsWith('test') || !sourceSet.name.startsWith('androidTest')) {
                sourceSet.kotlin.setSrcDirs([])
            }
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}
kapt {
    generateStubs = true
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        force "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    }
}
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500"
    }
}

dependencies {

    /*********************Test Library Dependencies*****************************************/
    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile 'junit:junit:4.12'
    androidTestCompile("com.android.support.test.espresso:espresso-core:${espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Optional if you need to detect intents.
    androidTestCompile("com.android.support.test.espresso:espresso-intents:${espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //mockito
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    androidTestCompile "org.mockito:mockito-android:$mockitoVersion"
    testCompile "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion" //allow mockito to generate class in android virtual machine
    androidTestCompile "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion" //helper functions to work with Mockito in Kotlin. (e.g. whenever())


    //assertJ (assertThat())
    testCompile "org.assertj:assertj-core:$assertjVersion"
    androidTestCompile "org.assertj:assertj-core:$assertjVersion"

//    //kotlin test
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"

    //uiautomator
    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:$uiAutomatorVersion"

    /*********************Support Library Dependencies*****************************************/
    compile "com.android.support:appcompat-v7:$supportLibVersion"

    //design-support-library (material ui and animation)
    compile "com.android.support:design:$supportLibVersion"
    compile "com.android.support:recyclerview-v7:$supportLibVersion"
    compile "com.android.support:cardview-v7:$supportLibVersion"
    compile "com.android.support:support-vector-drawable:$supportLibVersion"
    compile "com.android.support:animated-vector-drawable:$supportLibVersion"

    //constraint layout
    compile "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    /*********************Library for clean architecture*****************************************/
    //kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    kapt "com.android.databinding:compiler:$gradleBuildVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"


    //dagger
    compile "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
    provided 'org.glassfish:javax.annotation:10.0-b28'

    //retrofit
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile 'com.squareup.okhttp3:logging-interceptor:3.3.1'
    //log (https://futurestud.io/tutorials/retrofit-2-log-requests-and-responses)
    //OkHttp
    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile 'com.squareup.okio:okio:1.7.0'
    //Gson
    compile 'com.google.code.gson:gson:2.8.0'
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"

    //rxJava
    compile "io.reactivex.rxjava2:rxandroid:${rxandroidVersion}"
    compile "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    /*********************Utils library*****************************************/
    compile 'com.jjoe64:graphview:4.2.1'//graphView
    compile 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.2@aar' // permission
    compile 'com.wang.avi:library:2.1.3' //loading view
    compile 'io.github.luizgrp.sectionedrecyclerviewadapter:sectionedrecyclerviewadapter:1.0.4' //recycleview section
    compile 'com.github.StevenDXC:DxLoadingButton:1.4' //loading button
}
